/**
 * 
 */
package Optimization;

import java.util.ArrayList;
import DataClass.Location;
import DataClass.LowerSolutions;
import DataClass.SuperArea;
import DataClass.UpperSolutions;
import Manager.DataGeneration;
import Manager.DatatoExcel;
import Manager.Lower_level_model;
import Manager.ResultstoExcel;
import Manager.Upper_level_model;

/**
 * @author bairongw
 *
 */
public class MainForSimulationData {

	/**
	 * @param args
	 * this is used to solve the models with different parameters with simulation data
	 * 
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		MainForSimulationData mf=new MainForSimulationData ();
		Upper_level_model model=new Upper_level_model();
	
		
		
	//	ArrayList<Double> UValues=new ArrayList<Double>() ; // the range value of CHs
		int eventDemand=30;  //this is the demand generated by the event
		int fulCa=150;
		int hourcount=24;
		int xlim=6;
		int ylim=6;
		int xdiv=2;
		int ydiv=3;
		double U=1.5;
		Location eventLocation=new Location(1.5,1.5);  // this is the event location 
		
		DataGeneration up=new DataGeneration();
		
	 ArrayList<Integer> factors= model.findFactors(fulCa); // get all factors of a full capacity value and their combinations	
	 ArrayList<Integer> ufactors= model.findFactors(hourcount); 
	 int[] us={24}; // 24,12,8,6,4,3,2,1
	
	 ArrayList<UpperSolutions> solutions=new ArrayList<UpperSolutions>(); // a list of the Upper solutions, results from the pooling method
	 ArrayList<SuperArea[]> supers_days=new ArrayList<SuperArea[]>() ; // just for one day, each super area's demand
			
	 // generate the supers_days by simulation 
       supers_days=up.generateSubfromSimulation(xlim, ylim, xdiv, ydiv, U, hourcount, eventDemand, eventLocation);
	
       DatatoExcel de=new DatatoExcel();
       String f="C:\\Users\\nihao\\SC Rest\\Zgeneral\\SC data\\supers_days_simulation.xlsx";
       
		de.superday2excel(f, supers_days);
		ResultstoExcel res= new ResultstoExcel();
		
		
		String lowerpath="C://Users//nihao//Dropbox//Twitter Coverage//UpperResults//lowerSimulation.xlsx";
		String upperpath="C://Users//nihao//Dropbox//Twitter Coverage//UpperResults//upperSimulation.xlsx";
			
		for(int k=0;k<us.length;k++){
			System.out.println(us[k] );
			for(int i=1;i<11;i++){ // control the range of equity parameter
		double 	equity=Double.valueOf(String.format("%.2f", 0.1*i ));
			
		for(int j=1;j<factors.size()-1;j++){  // combination of b and CH_count
	
		     int CH_count=factors.get(j);
			int capacity=fulCa/CH_count;
			/*CH_count=6;
			capacity=50;*/
			
			
				solutions=	model.solveMe(supers_days, CH_count, equity, hourcount, capacity,us[k] ,U);	
				res.upper2excel(upperpath,solutions);
				mf.afterUpper(solutions, lowerpath, supers_days, capacity);  // write the lower solutions too
				
			}
			}
		
		}
		
	
		
	
		
		}
		
		
		
		
		
		
		
		public  void afterUpper( ArrayList<UpperSolutions> solutions, String lowerpath, ArrayList<SuperArea[]> supers_days, int capacity){
           
			int hourcount=supers_days.size();
			int sz=solutions.size();  // size of the solution
            Lower_level_model lm=new Lower_level_model();	
			
			for(int s=0;s<sz ;s++){  
				ArrayList< LowerSolutions> lowers=new ArrayList<LowerSolutions>();  // for each of the upper solutions, we have a serious of lower solutions
			for(int d=0;d<hourcount;d++){
				ArrayList<Integer> xs=solutions.get(s).getX().get(d);
				ArrayList<Integer> ys=solutions.get(s).getY().get(d);
				String solutionIndex=solutions.get(s).getDaySolutionIndex().get(d);
				int supercount=xs.size();
				 for(int t=0;t<supercount;t++){
					 int xv=xs.get(t);  // the number of CHs assigned to this super area is greater than 0
					 if(xv>0){
						ArrayList< LowerSolutions> lower=lm.solveMe( supers_days.get(d)[t], xv, capacity, (int) ys.get(t),solutionIndex  );
	  				  lowers.addAll(lower);
				
					 }
				 }
			}
			ResultstoExcel res= new ResultstoExcel();
		res.lower2excel(lowerpath, lowers);
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
		}
		
			
		
		
		
		
		
		
		
		

	}


