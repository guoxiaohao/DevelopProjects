// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server2client.proto

#ifndef PROTOBUF_INCLUDED_server2client_2eproto
#define PROTOBUF_INCLUDED_server2client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server2client_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_server2client_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_server2client_2eproto();
namespace server2client {
class msg_connect;
class msg_connectDefaultTypeInternal;
extern msg_connectDefaultTypeInternal _msg_connect_default_instance_;
class msg_connect_ack;
class msg_connect_ackDefaultTypeInternal;
extern msg_connect_ackDefaultTypeInternal _msg_connect_ack_default_instance_;
class msg_content;
class msg_contentDefaultTypeInternal;
extern msg_contentDefaultTypeInternal _msg_content_default_instance_;
class msg_establish_brokerchannel;
class msg_establish_brokerchannelDefaultTypeInternal;
extern msg_establish_brokerchannelDefaultTypeInternal _msg_establish_brokerchannel_default_instance_;
class msg_establish_brokerchannel_ack;
class msg_establish_brokerchannel_ackDefaultTypeInternal;
extern msg_establish_brokerchannel_ackDefaultTypeInternal _msg_establish_brokerchannel_ack_default_instance_;
class msg_login;
class msg_loginDefaultTypeInternal;
extern msg_loginDefaultTypeInternal _msg_login_default_instance_;
class msg_login_ack;
class msg_login_ackDefaultTypeInternal;
extern msg_login_ackDefaultTypeInternal _msg_login_ack_default_instance_;
class msg_testmap;
class msg_testmapDefaultTypeInternal;
extern msg_testmapDefaultTypeInternal _msg_testmap_default_instance_;
class msg_testmap_MapInfoEntry_DoNotUse;
class msg_testmap_MapInfoEntry_DoNotUseDefaultTypeInternal;
extern msg_testmap_MapInfoEntry_DoNotUseDefaultTypeInternal _msg_testmap_MapInfoEntry_DoNotUse_default_instance_;
}  // namespace server2client
namespace google {
namespace protobuf {
template<> ::server2client::msg_connect* Arena::CreateMaybeMessage<::server2client::msg_connect>(Arena*);
template<> ::server2client::msg_connect_ack* Arena::CreateMaybeMessage<::server2client::msg_connect_ack>(Arena*);
template<> ::server2client::msg_content* Arena::CreateMaybeMessage<::server2client::msg_content>(Arena*);
template<> ::server2client::msg_establish_brokerchannel* Arena::CreateMaybeMessage<::server2client::msg_establish_brokerchannel>(Arena*);
template<> ::server2client::msg_establish_brokerchannel_ack* Arena::CreateMaybeMessage<::server2client::msg_establish_brokerchannel_ack>(Arena*);
template<> ::server2client::msg_login* Arena::CreateMaybeMessage<::server2client::msg_login>(Arena*);
template<> ::server2client::msg_login_ack* Arena::CreateMaybeMessage<::server2client::msg_login_ack>(Arena*);
template<> ::server2client::msg_testmap* Arena::CreateMaybeMessage<::server2client::msg_testmap>(Arena*);
template<> ::server2client::msg_testmap_MapInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::server2client::msg_testmap_MapInfoEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace server2client {

enum msg_content_msg_type {
  msg_content_msg_type_connect = 0,
  msg_content_msg_type_login = 1,
  msg_content_msg_type_establish_brokerchannel = 2,
  msg_content_msg_type_connect_ack = 3,
  msg_content_msg_type_login_ack = 4,
  msg_content_msg_type_establish_brokerchannel_ack = 5,
  msg_content_msg_type_testmap = 6,
  msg_content_msg_type_msg_content_msg_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  msg_content_msg_type_msg_content_msg_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool msg_content_msg_type_IsValid(int value);
const msg_content_msg_type msg_content_msg_type_msg_type_MIN = msg_content_msg_type_connect;
const msg_content_msg_type msg_content_msg_type_msg_type_MAX = msg_content_msg_type_testmap;
const int msg_content_msg_type_msg_type_ARRAYSIZE = msg_content_msg_type_msg_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg_content_msg_type_descriptor();
inline const ::std::string& msg_content_msg_type_Name(msg_content_msg_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg_content_msg_type_descriptor(), value);
}
inline bool msg_content_msg_type_Parse(
    const ::std::string& name, msg_content_msg_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg_content_msg_type>(
    msg_content_msg_type_descriptor(), name, value);
}
// ===================================================================

class msg_content final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_content) */ {
 public:
  msg_content();
  virtual ~msg_content();

  msg_content(const msg_content& from);

  inline msg_content& operator=(const msg_content& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_content(msg_content&& from) noexcept
    : msg_content() {
    *this = ::std::move(from);
  }

  inline msg_content& operator=(msg_content&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_content& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_content* internal_default_instance() {
    return reinterpret_cast<const msg_content*>(
               &_msg_content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(msg_content* other);
  friend void swap(msg_content& a, msg_content& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_content* New() const final {
    return CreateMaybeMessage<msg_content>(nullptr);
  }

  msg_content* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_content>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_content& from);
  void MergeFrom(const msg_content& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_content* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef msg_content_msg_type msg_type;
  static const msg_type connect =
    msg_content_msg_type_connect;
  static const msg_type login =
    msg_content_msg_type_login;
  static const msg_type establish_brokerchannel =
    msg_content_msg_type_establish_brokerchannel;
  static const msg_type connect_ack =
    msg_content_msg_type_connect_ack;
  static const msg_type login_ack =
    msg_content_msg_type_login_ack;
  static const msg_type establish_brokerchannel_ack =
    msg_content_msg_type_establish_brokerchannel_ack;
  static const msg_type testmap =
    msg_content_msg_type_testmap;
  static inline bool msg_type_IsValid(int value) {
    return msg_content_msg_type_IsValid(value);
  }
  static const msg_type msg_type_MIN =
    msg_content_msg_type_msg_type_MIN;
  static const msg_type msg_type_MAX =
    msg_content_msg_type_msg_type_MAX;
  static const int msg_type_ARRAYSIZE =
    msg_content_msg_type_msg_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  msg_type_descriptor() {
    return msg_content_msg_type_descriptor();
  }
  static inline const ::std::string& msg_type_Name(msg_type value) {
    return msg_content_msg_type_Name(value);
  }
  static inline bool msg_type_Parse(const ::std::string& name,
      msg_type* value) {
    return msg_content_msg_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes datas = 2;
  void clear_datas();
  static const int kDatasFieldNumber = 2;
  const ::std::string& datas() const;
  void set_datas(const ::std::string& value);
  #if LANG_CXX11
  void set_datas(::std::string&& value);
  #endif
  void set_datas(const char* value);
  void set_datas(const void* value, size_t size);
  ::std::string* mutable_datas();
  ::std::string* release_datas();
  void set_allocated_datas(::std::string* datas);

  // .server2client.msg_content.msg_type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::server2client::msg_content_msg_type type() const;
  void set_type(::server2client::msg_content_msg_type value);

  // @@protoc_insertion_point(class_scope:server2client.msg_content)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr datas_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_connect final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_connect) */ {
 public:
  msg_connect();
  virtual ~msg_connect();

  msg_connect(const msg_connect& from);

  inline msg_connect& operator=(const msg_connect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_connect(msg_connect&& from) noexcept
    : msg_connect() {
    *this = ::std::move(from);
  }

  inline msg_connect& operator=(msg_connect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_connect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_connect* internal_default_instance() {
    return reinterpret_cast<const msg_connect*>(
               &_msg_connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(msg_connect* other);
  friend void swap(msg_connect& a, msg_connect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_connect* New() const final {
    return CreateMaybeMessage<msg_connect>(nullptr);
  }

  msg_connect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_connect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_connect& from);
  void MergeFrom(const msg_connect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_connect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 arr_ints = 1;
  int arr_ints_size() const;
  void clear_arr_ints();
  static const int kArrIntsFieldNumber = 1;
  ::google::protobuf::int32 arr_ints(int index) const;
  void set_arr_ints(int index, ::google::protobuf::int32 value);
  void add_arr_ints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr_ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr_ints();

  // repeated string arr_strings = 2;
  int arr_strings_size() const;
  void clear_arr_strings();
  static const int kArrStringsFieldNumber = 2;
  const ::std::string& arr_strings(int index) const;
  ::std::string* mutable_arr_strings(int index);
  void set_arr_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arr_strings(int index, ::std::string&& value);
  #endif
  void set_arr_strings(int index, const char* value);
  void set_arr_strings(int index, const char* value, size_t size);
  ::std::string* add_arr_strings();
  void add_arr_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_arr_strings(::std::string&& value);
  #endif
  void add_arr_strings(const char* value);
  void add_arr_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& arr_strings() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_arr_strings();

  // @@protoc_insertion_point(class_scope:server2client.msg_connect)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_ints_;
  mutable std::atomic<int> _arr_ints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> arr_strings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_connect_ack final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_connect_ack) */ {
 public:
  msg_connect_ack();
  virtual ~msg_connect_ack();

  msg_connect_ack(const msg_connect_ack& from);

  inline msg_connect_ack& operator=(const msg_connect_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_connect_ack(msg_connect_ack&& from) noexcept
    : msg_connect_ack() {
    *this = ::std::move(from);
  }

  inline msg_connect_ack& operator=(msg_connect_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_connect_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_connect_ack* internal_default_instance() {
    return reinterpret_cast<const msg_connect_ack*>(
               &_msg_connect_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(msg_connect_ack* other);
  friend void swap(msg_connect_ack& a, msg_connect_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_connect_ack* New() const final {
    return CreateMaybeMessage<msg_connect_ack>(nullptr);
  }

  msg_connect_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_connect_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_connect_ack& from);
  void MergeFrom(const msg_connect_ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_connect_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 arr_ints = 1;
  int arr_ints_size() const;
  void clear_arr_ints();
  static const int kArrIntsFieldNumber = 1;
  ::google::protobuf::int32 arr_ints(int index) const;
  void set_arr_ints(int index, ::google::protobuf::int32 value);
  void add_arr_ints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr_ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr_ints();

  // @@protoc_insertion_point(class_scope:server2client.msg_connect_ack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_ints_;
  mutable std::atomic<int> _arr_ints_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_login final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_login) */ {
 public:
  msg_login();
  virtual ~msg_login();

  msg_login(const msg_login& from);

  inline msg_login& operator=(const msg_login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_login(msg_login&& from) noexcept
    : msg_login() {
    *this = ::std::move(from);
  }

  inline msg_login& operator=(msg_login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_login* internal_default_instance() {
    return reinterpret_cast<const msg_login*>(
               &_msg_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(msg_login* other);
  friend void swap(msg_login& a, msg_login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_login* New() const final {
    return CreateMaybeMessage<msg_login>(nullptr);
  }

  msg_login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_login& from);
  void MergeFrom(const msg_login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 arr_ints = 1;
  int arr_ints_size() const;
  void clear_arr_ints();
  static const int kArrIntsFieldNumber = 1;
  ::google::protobuf::int32 arr_ints(int index) const;
  void set_arr_ints(int index, ::google::protobuf::int32 value);
  void add_arr_ints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr_ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr_ints();

  // repeated string arr_strings = 2;
  int arr_strings_size() const;
  void clear_arr_strings();
  static const int kArrStringsFieldNumber = 2;
  const ::std::string& arr_strings(int index) const;
  ::std::string* mutable_arr_strings(int index);
  void set_arr_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arr_strings(int index, ::std::string&& value);
  #endif
  void set_arr_strings(int index, const char* value);
  void set_arr_strings(int index, const char* value, size_t size);
  ::std::string* add_arr_strings();
  void add_arr_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_arr_strings(::std::string&& value);
  #endif
  void add_arr_strings(const char* value);
  void add_arr_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& arr_strings() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_arr_strings();

  // @@protoc_insertion_point(class_scope:server2client.msg_login)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_ints_;
  mutable std::atomic<int> _arr_ints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> arr_strings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_login_ack final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_login_ack) */ {
 public:
  msg_login_ack();
  virtual ~msg_login_ack();

  msg_login_ack(const msg_login_ack& from);

  inline msg_login_ack& operator=(const msg_login_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_login_ack(msg_login_ack&& from) noexcept
    : msg_login_ack() {
    *this = ::std::move(from);
  }

  inline msg_login_ack& operator=(msg_login_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_login_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_login_ack* internal_default_instance() {
    return reinterpret_cast<const msg_login_ack*>(
               &_msg_login_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(msg_login_ack* other);
  friend void swap(msg_login_ack& a, msg_login_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_login_ack* New() const final {
    return CreateMaybeMessage<msg_login_ack>(nullptr);
  }

  msg_login_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_login_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_login_ack& from);
  void MergeFrom(const msg_login_ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_login_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 arr_ints = 1;
  int arr_ints_size() const;
  void clear_arr_ints();
  static const int kArrIntsFieldNumber = 1;
  ::google::protobuf::int32 arr_ints(int index) const;
  void set_arr_ints(int index, ::google::protobuf::int32 value);
  void add_arr_ints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr_ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr_ints();

  // repeated string arr_strings = 2;
  int arr_strings_size() const;
  void clear_arr_strings();
  static const int kArrStringsFieldNumber = 2;
  const ::std::string& arr_strings(int index) const;
  ::std::string* mutable_arr_strings(int index);
  void set_arr_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arr_strings(int index, ::std::string&& value);
  #endif
  void set_arr_strings(int index, const char* value);
  void set_arr_strings(int index, const char* value, size_t size);
  ::std::string* add_arr_strings();
  void add_arr_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_arr_strings(::std::string&& value);
  #endif
  void add_arr_strings(const char* value);
  void add_arr_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& arr_strings() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_arr_strings();

  // @@protoc_insertion_point(class_scope:server2client.msg_login_ack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_ints_;
  mutable std::atomic<int> _arr_ints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> arr_strings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_establish_brokerchannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_establish_brokerchannel) */ {
 public:
  msg_establish_brokerchannel();
  virtual ~msg_establish_brokerchannel();

  msg_establish_brokerchannel(const msg_establish_brokerchannel& from);

  inline msg_establish_brokerchannel& operator=(const msg_establish_brokerchannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_establish_brokerchannel(msg_establish_brokerchannel&& from) noexcept
    : msg_establish_brokerchannel() {
    *this = ::std::move(from);
  }

  inline msg_establish_brokerchannel& operator=(msg_establish_brokerchannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_establish_brokerchannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_establish_brokerchannel* internal_default_instance() {
    return reinterpret_cast<const msg_establish_brokerchannel*>(
               &_msg_establish_brokerchannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(msg_establish_brokerchannel* other);
  friend void swap(msg_establish_brokerchannel& a, msg_establish_brokerchannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_establish_brokerchannel* New() const final {
    return CreateMaybeMessage<msg_establish_brokerchannel>(nullptr);
  }

  msg_establish_brokerchannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_establish_brokerchannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_establish_brokerchannel& from);
  void MergeFrom(const msg_establish_brokerchannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_establish_brokerchannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 arr_ints = 1;
  int arr_ints_size() const;
  void clear_arr_ints();
  static const int kArrIntsFieldNumber = 1;
  ::google::protobuf::int32 arr_ints(int index) const;
  void set_arr_ints(int index, ::google::protobuf::int32 value);
  void add_arr_ints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr_ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr_ints();

  // repeated string arr_strings = 2;
  int arr_strings_size() const;
  void clear_arr_strings();
  static const int kArrStringsFieldNumber = 2;
  const ::std::string& arr_strings(int index) const;
  ::std::string* mutable_arr_strings(int index);
  void set_arr_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arr_strings(int index, ::std::string&& value);
  #endif
  void set_arr_strings(int index, const char* value);
  void set_arr_strings(int index, const char* value, size_t size);
  ::std::string* add_arr_strings();
  void add_arr_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_arr_strings(::std::string&& value);
  #endif
  void add_arr_strings(const char* value);
  void add_arr_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& arr_strings() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_arr_strings();

  // @@protoc_insertion_point(class_scope:server2client.msg_establish_brokerchannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_ints_;
  mutable std::atomic<int> _arr_ints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> arr_strings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_establish_brokerchannel_ack final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_establish_brokerchannel_ack) */ {
 public:
  msg_establish_brokerchannel_ack();
  virtual ~msg_establish_brokerchannel_ack();

  msg_establish_brokerchannel_ack(const msg_establish_brokerchannel_ack& from);

  inline msg_establish_brokerchannel_ack& operator=(const msg_establish_brokerchannel_ack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_establish_brokerchannel_ack(msg_establish_brokerchannel_ack&& from) noexcept
    : msg_establish_brokerchannel_ack() {
    *this = ::std::move(from);
  }

  inline msg_establish_brokerchannel_ack& operator=(msg_establish_brokerchannel_ack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_establish_brokerchannel_ack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_establish_brokerchannel_ack* internal_default_instance() {
    return reinterpret_cast<const msg_establish_brokerchannel_ack*>(
               &_msg_establish_brokerchannel_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(msg_establish_brokerchannel_ack* other);
  friend void swap(msg_establish_brokerchannel_ack& a, msg_establish_brokerchannel_ack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_establish_brokerchannel_ack* New() const final {
    return CreateMaybeMessage<msg_establish_brokerchannel_ack>(nullptr);
  }

  msg_establish_brokerchannel_ack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_establish_brokerchannel_ack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_establish_brokerchannel_ack& from);
  void MergeFrom(const msg_establish_brokerchannel_ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_establish_brokerchannel_ack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 arr_ints = 1;
  int arr_ints_size() const;
  void clear_arr_ints();
  static const int kArrIntsFieldNumber = 1;
  ::google::protobuf::int32 arr_ints(int index) const;
  void set_arr_ints(int index, ::google::protobuf::int32 value);
  void add_arr_ints(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      arr_ints() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_arr_ints();

  // repeated string arr_strings = 2;
  int arr_strings_size() const;
  void clear_arr_strings();
  static const int kArrStringsFieldNumber = 2;
  const ::std::string& arr_strings(int index) const;
  ::std::string* mutable_arr_strings(int index);
  void set_arr_strings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_arr_strings(int index, ::std::string&& value);
  #endif
  void set_arr_strings(int index, const char* value);
  void set_arr_strings(int index, const char* value, size_t size);
  ::std::string* add_arr_strings();
  void add_arr_strings(const ::std::string& value);
  #if LANG_CXX11
  void add_arr_strings(::std::string&& value);
  #endif
  void add_arr_strings(const char* value);
  void add_arr_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& arr_strings() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_arr_strings();

  // @@protoc_insertion_point(class_scope:server2client.msg_establish_brokerchannel_ack)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > arr_ints_;
  mutable std::atomic<int> _arr_ints_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> arr_strings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// -------------------------------------------------------------------

class msg_testmap_MapInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<msg_testmap_MapInfoEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<msg_testmap_MapInfoEntry_DoNotUse, 
    ::google::protobuf::int32, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  msg_testmap_MapInfoEntry_DoNotUse();
  msg_testmap_MapInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const msg_testmap_MapInfoEntry_DoNotUse& other);
  static const msg_testmap_MapInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const msg_testmap_MapInfoEntry_DoNotUse*>(&_msg_testmap_MapInfoEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class msg_testmap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:server2client.msg_testmap) */ {
 public:
  msg_testmap();
  virtual ~msg_testmap();

  msg_testmap(const msg_testmap& from);

  inline msg_testmap& operator=(const msg_testmap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg_testmap(msg_testmap&& from) noexcept
    : msg_testmap() {
    *this = ::std::move(from);
  }

  inline msg_testmap& operator=(msg_testmap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const msg_testmap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const msg_testmap* internal_default_instance() {
    return reinterpret_cast<const msg_testmap*>(
               &_msg_testmap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(msg_testmap* other);
  friend void swap(msg_testmap& a, msg_testmap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg_testmap* New() const final {
    return CreateMaybeMessage<msg_testmap>(nullptr);
  }

  msg_testmap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<msg_testmap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const msg_testmap& from);
  void MergeFrom(const msg_testmap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(msg_testmap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, string> map_info = 1;
  int map_info_size() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
      map_info() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
      mutable_map_info();

  // @@protoc_insertion_point(class_scope:server2client.msg_testmap)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      msg_testmap_MapInfoEntry_DoNotUse,
      ::google::protobuf::int32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > map_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server2client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// msg_content

// .server2client.msg_content.msg_type type = 1;
inline void msg_content::clear_type() {
  type_ = 0;
}
inline ::server2client::msg_content_msg_type msg_content::type() const {
  // @@protoc_insertion_point(field_get:server2client.msg_content.type)
  return static_cast< ::server2client::msg_content_msg_type >(type_);
}
inline void msg_content::set_type(::server2client::msg_content_msg_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:server2client.msg_content.type)
}

// bytes datas = 2;
inline void msg_content::clear_datas() {
  datas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& msg_content::datas() const {
  // @@protoc_insertion_point(field_get:server2client.msg_content.datas)
  return datas_.GetNoArena();
}
inline void msg_content::set_datas(const ::std::string& value) {
  
  datas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:server2client.msg_content.datas)
}
#if LANG_CXX11
inline void msg_content::set_datas(::std::string&& value) {
  
  datas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server2client.msg_content.datas)
}
#endif
inline void msg_content::set_datas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server2client.msg_content.datas)
}
inline void msg_content::set_datas(const void* value, size_t size) {
  
  datas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server2client.msg_content.datas)
}
inline ::std::string* msg_content::mutable_datas() {
  
  // @@protoc_insertion_point(field_mutable:server2client.msg_content.datas)
  return datas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg_content::release_datas() {
  // @@protoc_insertion_point(field_release:server2client.msg_content.datas)
  
  return datas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg_content::set_allocated_datas(::std::string* datas) {
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), datas);
  // @@protoc_insertion_point(field_set_allocated:server2client.msg_content.datas)
}

// -------------------------------------------------------------------

// msg_connect

// repeated int32 arr_ints = 1;
inline int msg_connect::arr_ints_size() const {
  return arr_ints_.size();
}
inline void msg_connect::clear_arr_ints() {
  arr_ints_.Clear();
}
inline ::google::protobuf::int32 msg_connect::arr_ints(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_connect.arr_ints)
  return arr_ints_.Get(index);
}
inline void msg_connect::set_arr_ints(int index, ::google::protobuf::int32 value) {
  arr_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2client.msg_connect.arr_ints)
}
inline void msg_connect::add_arr_ints(::google::protobuf::int32 value) {
  arr_ints_.Add(value);
  // @@protoc_insertion_point(field_add:server2client.msg_connect.arr_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_connect::arr_ints() const {
  // @@protoc_insertion_point(field_list:server2client.msg_connect.arr_ints)
  return arr_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_connect::mutable_arr_ints() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_connect.arr_ints)
  return &arr_ints_;
}

// repeated string arr_strings = 2;
inline int msg_connect::arr_strings_size() const {
  return arr_strings_.size();
}
inline void msg_connect::clear_arr_strings() {
  arr_strings_.Clear();
}
inline const ::std::string& msg_connect::arr_strings(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_connect.arr_strings)
  return arr_strings_.Get(index);
}
inline ::std::string* msg_connect::mutable_arr_strings(int index) {
  // @@protoc_insertion_point(field_mutable:server2client.msg_connect.arr_strings)
  return arr_strings_.Mutable(index);
}
inline void msg_connect::set_arr_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_connect.arr_strings)
  arr_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void msg_connect::set_arr_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_connect.arr_strings)
  arr_strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void msg_connect::set_arr_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server2client.msg_connect.arr_strings)
}
inline void msg_connect::set_arr_strings(int index, const char* value, size_t size) {
  arr_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server2client.msg_connect.arr_strings)
}
inline ::std::string* msg_connect::add_arr_strings() {
  // @@protoc_insertion_point(field_add_mutable:server2client.msg_connect.arr_strings)
  return arr_strings_.Add();
}
inline void msg_connect::add_arr_strings(const ::std::string& value) {
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server2client.msg_connect.arr_strings)
}
#if LANG_CXX11
inline void msg_connect::add_arr_strings(::std::string&& value) {
  arr_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server2client.msg_connect.arr_strings)
}
#endif
inline void msg_connect::add_arr_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server2client.msg_connect.arr_strings)
}
inline void msg_connect::add_arr_strings(const char* value, size_t size) {
  arr_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server2client.msg_connect.arr_strings)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
msg_connect::arr_strings() const {
  // @@protoc_insertion_point(field_list:server2client.msg_connect.arr_strings)
  return arr_strings_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
msg_connect::mutable_arr_strings() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_connect.arr_strings)
  return &arr_strings_;
}

// -------------------------------------------------------------------

// msg_connect_ack

// repeated int32 arr_ints = 1;
inline int msg_connect_ack::arr_ints_size() const {
  return arr_ints_.size();
}
inline void msg_connect_ack::clear_arr_ints() {
  arr_ints_.Clear();
}
inline ::google::protobuf::int32 msg_connect_ack::arr_ints(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_connect_ack.arr_ints)
  return arr_ints_.Get(index);
}
inline void msg_connect_ack::set_arr_ints(int index, ::google::protobuf::int32 value) {
  arr_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2client.msg_connect_ack.arr_ints)
}
inline void msg_connect_ack::add_arr_ints(::google::protobuf::int32 value) {
  arr_ints_.Add(value);
  // @@protoc_insertion_point(field_add:server2client.msg_connect_ack.arr_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_connect_ack::arr_ints() const {
  // @@protoc_insertion_point(field_list:server2client.msg_connect_ack.arr_ints)
  return arr_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_connect_ack::mutable_arr_ints() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_connect_ack.arr_ints)
  return &arr_ints_;
}

// -------------------------------------------------------------------

// msg_login

// repeated int32 arr_ints = 1;
inline int msg_login::arr_ints_size() const {
  return arr_ints_.size();
}
inline void msg_login::clear_arr_ints() {
  arr_ints_.Clear();
}
inline ::google::protobuf::int32 msg_login::arr_ints(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_login.arr_ints)
  return arr_ints_.Get(index);
}
inline void msg_login::set_arr_ints(int index, ::google::protobuf::int32 value) {
  arr_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2client.msg_login.arr_ints)
}
inline void msg_login::add_arr_ints(::google::protobuf::int32 value) {
  arr_ints_.Add(value);
  // @@protoc_insertion_point(field_add:server2client.msg_login.arr_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_login::arr_ints() const {
  // @@protoc_insertion_point(field_list:server2client.msg_login.arr_ints)
  return arr_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_login::mutable_arr_ints() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_login.arr_ints)
  return &arr_ints_;
}

// repeated string arr_strings = 2;
inline int msg_login::arr_strings_size() const {
  return arr_strings_.size();
}
inline void msg_login::clear_arr_strings() {
  arr_strings_.Clear();
}
inline const ::std::string& msg_login::arr_strings(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_login.arr_strings)
  return arr_strings_.Get(index);
}
inline ::std::string* msg_login::mutable_arr_strings(int index) {
  // @@protoc_insertion_point(field_mutable:server2client.msg_login.arr_strings)
  return arr_strings_.Mutable(index);
}
inline void msg_login::set_arr_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_login.arr_strings)
  arr_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void msg_login::set_arr_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_login.arr_strings)
  arr_strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void msg_login::set_arr_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server2client.msg_login.arr_strings)
}
inline void msg_login::set_arr_strings(int index, const char* value, size_t size) {
  arr_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server2client.msg_login.arr_strings)
}
inline ::std::string* msg_login::add_arr_strings() {
  // @@protoc_insertion_point(field_add_mutable:server2client.msg_login.arr_strings)
  return arr_strings_.Add();
}
inline void msg_login::add_arr_strings(const ::std::string& value) {
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server2client.msg_login.arr_strings)
}
#if LANG_CXX11
inline void msg_login::add_arr_strings(::std::string&& value) {
  arr_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server2client.msg_login.arr_strings)
}
#endif
inline void msg_login::add_arr_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server2client.msg_login.arr_strings)
}
inline void msg_login::add_arr_strings(const char* value, size_t size) {
  arr_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server2client.msg_login.arr_strings)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
msg_login::arr_strings() const {
  // @@protoc_insertion_point(field_list:server2client.msg_login.arr_strings)
  return arr_strings_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
msg_login::mutable_arr_strings() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_login.arr_strings)
  return &arr_strings_;
}

// -------------------------------------------------------------------

// msg_login_ack

// repeated int32 arr_ints = 1;
inline int msg_login_ack::arr_ints_size() const {
  return arr_ints_.size();
}
inline void msg_login_ack::clear_arr_ints() {
  arr_ints_.Clear();
}
inline ::google::protobuf::int32 msg_login_ack::arr_ints(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_login_ack.arr_ints)
  return arr_ints_.Get(index);
}
inline void msg_login_ack::set_arr_ints(int index, ::google::protobuf::int32 value) {
  arr_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2client.msg_login_ack.arr_ints)
}
inline void msg_login_ack::add_arr_ints(::google::protobuf::int32 value) {
  arr_ints_.Add(value);
  // @@protoc_insertion_point(field_add:server2client.msg_login_ack.arr_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_login_ack::arr_ints() const {
  // @@protoc_insertion_point(field_list:server2client.msg_login_ack.arr_ints)
  return arr_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_login_ack::mutable_arr_ints() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_login_ack.arr_ints)
  return &arr_ints_;
}

// repeated string arr_strings = 2;
inline int msg_login_ack::arr_strings_size() const {
  return arr_strings_.size();
}
inline void msg_login_ack::clear_arr_strings() {
  arr_strings_.Clear();
}
inline const ::std::string& msg_login_ack::arr_strings(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_login_ack.arr_strings)
  return arr_strings_.Get(index);
}
inline ::std::string* msg_login_ack::mutable_arr_strings(int index) {
  // @@protoc_insertion_point(field_mutable:server2client.msg_login_ack.arr_strings)
  return arr_strings_.Mutable(index);
}
inline void msg_login_ack::set_arr_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_login_ack.arr_strings)
  arr_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void msg_login_ack::set_arr_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_login_ack.arr_strings)
  arr_strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void msg_login_ack::set_arr_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server2client.msg_login_ack.arr_strings)
}
inline void msg_login_ack::set_arr_strings(int index, const char* value, size_t size) {
  arr_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server2client.msg_login_ack.arr_strings)
}
inline ::std::string* msg_login_ack::add_arr_strings() {
  // @@protoc_insertion_point(field_add_mutable:server2client.msg_login_ack.arr_strings)
  return arr_strings_.Add();
}
inline void msg_login_ack::add_arr_strings(const ::std::string& value) {
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server2client.msg_login_ack.arr_strings)
}
#if LANG_CXX11
inline void msg_login_ack::add_arr_strings(::std::string&& value) {
  arr_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server2client.msg_login_ack.arr_strings)
}
#endif
inline void msg_login_ack::add_arr_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server2client.msg_login_ack.arr_strings)
}
inline void msg_login_ack::add_arr_strings(const char* value, size_t size) {
  arr_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server2client.msg_login_ack.arr_strings)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
msg_login_ack::arr_strings() const {
  // @@protoc_insertion_point(field_list:server2client.msg_login_ack.arr_strings)
  return arr_strings_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
msg_login_ack::mutable_arr_strings() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_login_ack.arr_strings)
  return &arr_strings_;
}

// -------------------------------------------------------------------

// msg_establish_brokerchannel

// repeated int32 arr_ints = 1;
inline int msg_establish_brokerchannel::arr_ints_size() const {
  return arr_ints_.size();
}
inline void msg_establish_brokerchannel::clear_arr_ints() {
  arr_ints_.Clear();
}
inline ::google::protobuf::int32 msg_establish_brokerchannel::arr_ints(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_establish_brokerchannel.arr_ints)
  return arr_ints_.Get(index);
}
inline void msg_establish_brokerchannel::set_arr_ints(int index, ::google::protobuf::int32 value) {
  arr_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2client.msg_establish_brokerchannel.arr_ints)
}
inline void msg_establish_brokerchannel::add_arr_ints(::google::protobuf::int32 value) {
  arr_ints_.Add(value);
  // @@protoc_insertion_point(field_add:server2client.msg_establish_brokerchannel.arr_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_establish_brokerchannel::arr_ints() const {
  // @@protoc_insertion_point(field_list:server2client.msg_establish_brokerchannel.arr_ints)
  return arr_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_establish_brokerchannel::mutable_arr_ints() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_establish_brokerchannel.arr_ints)
  return &arr_ints_;
}

// repeated string arr_strings = 2;
inline int msg_establish_brokerchannel::arr_strings_size() const {
  return arr_strings_.size();
}
inline void msg_establish_brokerchannel::clear_arr_strings() {
  arr_strings_.Clear();
}
inline const ::std::string& msg_establish_brokerchannel::arr_strings(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_establish_brokerchannel.arr_strings)
  return arr_strings_.Get(index);
}
inline ::std::string* msg_establish_brokerchannel::mutable_arr_strings(int index) {
  // @@protoc_insertion_point(field_mutable:server2client.msg_establish_brokerchannel.arr_strings)
  return arr_strings_.Mutable(index);
}
inline void msg_establish_brokerchannel::set_arr_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_establish_brokerchannel.arr_strings)
  arr_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void msg_establish_brokerchannel::set_arr_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_establish_brokerchannel.arr_strings)
  arr_strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void msg_establish_brokerchannel::set_arr_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server2client.msg_establish_brokerchannel.arr_strings)
}
inline void msg_establish_brokerchannel::set_arr_strings(int index, const char* value, size_t size) {
  arr_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server2client.msg_establish_brokerchannel.arr_strings)
}
inline ::std::string* msg_establish_brokerchannel::add_arr_strings() {
  // @@protoc_insertion_point(field_add_mutable:server2client.msg_establish_brokerchannel.arr_strings)
  return arr_strings_.Add();
}
inline void msg_establish_brokerchannel::add_arr_strings(const ::std::string& value) {
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server2client.msg_establish_brokerchannel.arr_strings)
}
#if LANG_CXX11
inline void msg_establish_brokerchannel::add_arr_strings(::std::string&& value) {
  arr_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server2client.msg_establish_brokerchannel.arr_strings)
}
#endif
inline void msg_establish_brokerchannel::add_arr_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server2client.msg_establish_brokerchannel.arr_strings)
}
inline void msg_establish_brokerchannel::add_arr_strings(const char* value, size_t size) {
  arr_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server2client.msg_establish_brokerchannel.arr_strings)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
msg_establish_brokerchannel::arr_strings() const {
  // @@protoc_insertion_point(field_list:server2client.msg_establish_brokerchannel.arr_strings)
  return arr_strings_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
msg_establish_brokerchannel::mutable_arr_strings() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_establish_brokerchannel.arr_strings)
  return &arr_strings_;
}

// -------------------------------------------------------------------

// msg_establish_brokerchannel_ack

// repeated int32 arr_ints = 1;
inline int msg_establish_brokerchannel_ack::arr_ints_size() const {
  return arr_ints_.size();
}
inline void msg_establish_brokerchannel_ack::clear_arr_ints() {
  arr_ints_.Clear();
}
inline ::google::protobuf::int32 msg_establish_brokerchannel_ack::arr_ints(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_establish_brokerchannel_ack.arr_ints)
  return arr_ints_.Get(index);
}
inline void msg_establish_brokerchannel_ack::set_arr_ints(int index, ::google::protobuf::int32 value) {
  arr_ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:server2client.msg_establish_brokerchannel_ack.arr_ints)
}
inline void msg_establish_brokerchannel_ack::add_arr_ints(::google::protobuf::int32 value) {
  arr_ints_.Add(value);
  // @@protoc_insertion_point(field_add:server2client.msg_establish_brokerchannel_ack.arr_ints)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
msg_establish_brokerchannel_ack::arr_ints() const {
  // @@protoc_insertion_point(field_list:server2client.msg_establish_brokerchannel_ack.arr_ints)
  return arr_ints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
msg_establish_brokerchannel_ack::mutable_arr_ints() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_establish_brokerchannel_ack.arr_ints)
  return &arr_ints_;
}

// repeated string arr_strings = 2;
inline int msg_establish_brokerchannel_ack::arr_strings_size() const {
  return arr_strings_.size();
}
inline void msg_establish_brokerchannel_ack::clear_arr_strings() {
  arr_strings_.Clear();
}
inline const ::std::string& msg_establish_brokerchannel_ack::arr_strings(int index) const {
  // @@protoc_insertion_point(field_get:server2client.msg_establish_brokerchannel_ack.arr_strings)
  return arr_strings_.Get(index);
}
inline ::std::string* msg_establish_brokerchannel_ack::mutable_arr_strings(int index) {
  // @@protoc_insertion_point(field_mutable:server2client.msg_establish_brokerchannel_ack.arr_strings)
  return arr_strings_.Mutable(index);
}
inline void msg_establish_brokerchannel_ack::set_arr_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_establish_brokerchannel_ack.arr_strings)
  arr_strings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void msg_establish_brokerchannel_ack::set_arr_strings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:server2client.msg_establish_brokerchannel_ack.arr_strings)
  arr_strings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void msg_establish_brokerchannel_ack::set_arr_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server2client.msg_establish_brokerchannel_ack.arr_strings)
}
inline void msg_establish_brokerchannel_ack::set_arr_strings(int index, const char* value, size_t size) {
  arr_strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server2client.msg_establish_brokerchannel_ack.arr_strings)
}
inline ::std::string* msg_establish_brokerchannel_ack::add_arr_strings() {
  // @@protoc_insertion_point(field_add_mutable:server2client.msg_establish_brokerchannel_ack.arr_strings)
  return arr_strings_.Add();
}
inline void msg_establish_brokerchannel_ack::add_arr_strings(const ::std::string& value) {
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server2client.msg_establish_brokerchannel_ack.arr_strings)
}
#if LANG_CXX11
inline void msg_establish_brokerchannel_ack::add_arr_strings(::std::string&& value) {
  arr_strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server2client.msg_establish_brokerchannel_ack.arr_strings)
}
#endif
inline void msg_establish_brokerchannel_ack::add_arr_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arr_strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server2client.msg_establish_brokerchannel_ack.arr_strings)
}
inline void msg_establish_brokerchannel_ack::add_arr_strings(const char* value, size_t size) {
  arr_strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server2client.msg_establish_brokerchannel_ack.arr_strings)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
msg_establish_brokerchannel_ack::arr_strings() const {
  // @@protoc_insertion_point(field_list:server2client.msg_establish_brokerchannel_ack.arr_strings)
  return arr_strings_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
msg_establish_brokerchannel_ack::mutable_arr_strings() {
  // @@protoc_insertion_point(field_mutable_list:server2client.msg_establish_brokerchannel_ack.arr_strings)
  return &arr_strings_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// msg_testmap

// map<int32, string> map_info = 1;
inline int msg_testmap::map_info_size() const {
  return map_info_.size();
}
inline void msg_testmap::clear_map_info() {
  map_info_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >&
msg_testmap::map_info() const {
  // @@protoc_insertion_point(field_map:server2client.msg_testmap.map_info)
  return map_info_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >*
msg_testmap::mutable_map_info() {
  // @@protoc_insertion_point(field_mutable_map:server2client.msg_testmap.map_info)
  return map_info_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server2client

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::server2client::msg_content_msg_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server2client::msg_content_msg_type>() {
  return ::server2client::msg_content_msg_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_server2client_2eproto
