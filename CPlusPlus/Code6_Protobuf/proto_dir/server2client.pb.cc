// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server2client.proto

#include "server2client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_server2client_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_msg_testmap_MapInfoEntry_DoNotUse_server2client_2eproto;
namespace server2client {
class msg_contentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_content> _instance;
} _msg_content_default_instance_;
class msg_connectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_connect> _instance;
} _msg_connect_default_instance_;
class msg_connect_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_connect_ack> _instance;
} _msg_connect_ack_default_instance_;
class msg_loginDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_login> _instance;
} _msg_login_default_instance_;
class msg_login_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_login_ack> _instance;
} _msg_login_ack_default_instance_;
class msg_establish_brokerchannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_establish_brokerchannel> _instance;
} _msg_establish_brokerchannel_default_instance_;
class msg_establish_brokerchannel_ackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_establish_brokerchannel_ack> _instance;
} _msg_establish_brokerchannel_ack_default_instance_;
class msg_testmap_MapInfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_testmap_MapInfoEntry_DoNotUse> _instance;
} _msg_testmap_MapInfoEntry_DoNotUse_default_instance_;
class msg_testmapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<msg_testmap> _instance;
} _msg_testmap_default_instance_;
}  // namespace server2client
static void InitDefaultsmsg_content_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_content_default_instance_;
    new (ptr) ::server2client::msg_content();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_content::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_content_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_content_server2client_2eproto}, {}};

static void InitDefaultsmsg_connect_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_connect_default_instance_;
    new (ptr) ::server2client::msg_connect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_connect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_connect_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_connect_server2client_2eproto}, {}};

static void InitDefaultsmsg_connect_ack_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_connect_ack_default_instance_;
    new (ptr) ::server2client::msg_connect_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_connect_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_connect_ack_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_connect_ack_server2client_2eproto}, {}};

static void InitDefaultsmsg_login_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_login_default_instance_;
    new (ptr) ::server2client::msg_login();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_login::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_login_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_login_server2client_2eproto}, {}};

static void InitDefaultsmsg_login_ack_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_login_ack_default_instance_;
    new (ptr) ::server2client::msg_login_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_login_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_login_ack_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_login_ack_server2client_2eproto}, {}};

static void InitDefaultsmsg_establish_brokerchannel_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_establish_brokerchannel_default_instance_;
    new (ptr) ::server2client::msg_establish_brokerchannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_establish_brokerchannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_establish_brokerchannel_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_establish_brokerchannel_server2client_2eproto}, {}};

static void InitDefaultsmsg_establish_brokerchannel_ack_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_establish_brokerchannel_ack_default_instance_;
    new (ptr) ::server2client::msg_establish_brokerchannel_ack();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_establish_brokerchannel_ack::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_establish_brokerchannel_ack_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_establish_brokerchannel_ack_server2client_2eproto}, {}};

static void InitDefaultsmsg_testmap_MapInfoEntry_DoNotUse_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_testmap_MapInfoEntry_DoNotUse_default_instance_;
    new (ptr) ::server2client::msg_testmap_MapInfoEntry_DoNotUse();
  }
  ::server2client::msg_testmap_MapInfoEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_msg_testmap_MapInfoEntry_DoNotUse_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmsg_testmap_MapInfoEntry_DoNotUse_server2client_2eproto}, {}};

static void InitDefaultsmsg_testmap_server2client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server2client::_msg_testmap_default_instance_;
    new (ptr) ::server2client::msg_testmap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server2client::msg_testmap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_msg_testmap_server2client_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsmsg_testmap_server2client_2eproto}, {
      &scc_info_msg_testmap_MapInfoEntry_DoNotUse_server2client_2eproto.base,}};

void InitDefaults_server2client_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_msg_content_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_connect_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_connect_ack_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_login_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_login_ack_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_establish_brokerchannel_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_establish_brokerchannel_ack_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_testmap_MapInfoEntry_DoNotUse_server2client_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_msg_testmap_server2client_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_server2client_2eproto[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_server2client_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_server2client_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_server2client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_content, type_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_content, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_connect, arr_ints_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_connect, arr_strings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_connect_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_connect_ack, arr_ints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_login, arr_ints_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_login, arr_strings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_login_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_login_ack, arr_ints_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_login_ack, arr_strings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_establish_brokerchannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_establish_brokerchannel, arr_ints_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_establish_brokerchannel, arr_strings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_establish_brokerchannel_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_establish_brokerchannel_ack, arr_ints_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_establish_brokerchannel_ack, arr_strings_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_testmap_MapInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_testmap_MapInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_testmap_MapInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::server2client::msg_testmap_MapInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_testmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server2client::msg_testmap, map_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::server2client::msg_content)},
  { 7, -1, sizeof(::server2client::msg_connect)},
  { 14, -1, sizeof(::server2client::msg_connect_ack)},
  { 20, -1, sizeof(::server2client::msg_login)},
  { 27, -1, sizeof(::server2client::msg_login_ack)},
  { 34, -1, sizeof(::server2client::msg_establish_brokerchannel)},
  { 41, -1, sizeof(::server2client::msg_establish_brokerchannel_ack)},
  { 48, 55, sizeof(::server2client::msg_testmap_MapInfoEntry_DoNotUse)},
  { 57, -1, sizeof(::server2client::msg_testmap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_content_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_connect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_connect_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_login_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_establish_brokerchannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_establish_brokerchannel_ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_testmap_MapInfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::server2client::_msg_testmap_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_server2client_2eproto = {
  {}, AddDescriptors_server2client_2eproto, "server2client.proto", schemas,
  file_default_instances, TableStruct_server2client_2eproto::offsets,
  file_level_metadata_server2client_2eproto, 9, file_level_enum_descriptors_server2client_2eproto, file_level_service_descriptors_server2client_2eproto,
};

const char descriptor_table_protodef_server2client_2eproto[] =
  "\n\023server2client.proto\022\rserver2client\"\337\001\n"
  "\013msg_content\0221\n\004type\030\001 \001(\0162#.server2clie"
  "nt.msg_content.msg_type\022\r\n\005datas\030\002 \001(\014\"\215"
  "\001\n\010msg_type\022\013\n\007connect\020\000\022\t\n\005login\020\001\022\033\n\027e"
  "stablish_brokerchannel\020\002\022\017\n\013connect_ack\020"
  "\003\022\r\n\tlogin_ack\020\004\022\037\n\033establish_brokerchan"
  "nel_ack\020\005\022\013\n\007testmap\020\006\"4\n\013msg_connect\022\020\n"
  "\010arr_ints\030\001 \003(\005\022\023\n\013arr_strings\030\002 \003(\t\"#\n\017"
  "msg_connect_ack\022\020\n\010arr_ints\030\001 \003(\005\"2\n\tmsg"
  "_login\022\020\n\010arr_ints\030\001 \003(\005\022\023\n\013arr_strings\030"
  "\002 \003(\t\"6\n\rmsg_login_ack\022\020\n\010arr_ints\030\001 \003(\005"
  "\022\023\n\013arr_strings\030\002 \003(\t\"D\n\033msg_establish_b"
  "rokerchannel\022\020\n\010arr_ints\030\001 \003(\005\022\023\n\013arr_st"
  "rings\030\002 \003(\t\"H\n\037msg_establish_brokerchann"
  "el_ack\022\020\n\010arr_ints\030\001 \003(\005\022\023\n\013arr_strings\030"
  "\002 \003(\t\"x\n\013msg_testmap\0229\n\010map_info\030\001 \003(\0132\'"
  ".server2client.msg_testmap.MapInfoEntry\032"
  ".\n\014MapInfoEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 "
  "\001(\t:\0028\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_server2client_2eproto = {
  false, InitDefaults_server2client_2eproto, 
  descriptor_table_protodef_server2client_2eproto,
  "server2client.proto", &assign_descriptors_table_server2client_2eproto, 735,
};

void AddDescriptors_server2client_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_server2client_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_server2client_2eproto = []() { AddDescriptors_server2client_2eproto(); return true; }();
namespace server2client {
const ::google::protobuf::EnumDescriptor* msg_content_msg_type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_server2client_2eproto);
  return file_level_enum_descriptors_server2client_2eproto[0];
}
bool msg_content_msg_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const msg_content_msg_type msg_content::connect;
const msg_content_msg_type msg_content::login;
const msg_content_msg_type msg_content::establish_brokerchannel;
const msg_content_msg_type msg_content::connect_ack;
const msg_content_msg_type msg_content::login_ack;
const msg_content_msg_type msg_content::establish_brokerchannel_ack;
const msg_content_msg_type msg_content::testmap;
const msg_content_msg_type msg_content::msg_type_MIN;
const msg_content_msg_type msg_content::msg_type_MAX;
const int msg_content::msg_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void msg_content::InitAsDefaultInstance() {
}
class msg_content::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_content::kTypeFieldNumber;
const int msg_content::kDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_content::msg_content()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_content)
}
msg_content::msg_content(const msg_content& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.datas().size() > 0) {
    datas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datas_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:server2client.msg_content)
}

void msg_content::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_content_server2client_2eproto.base);
  datas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

msg_content::~msg_content() {
  // @@protoc_insertion_point(destructor:server2client.msg_content)
  SharedDtor();
}

void msg_content::SharedDtor() {
  datas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void msg_content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_content& msg_content::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_content_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_content::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_content::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_content*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .server2client.msg_content.msg_type type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::server2client::msg_content_msg_type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes datas = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_datas();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_content)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .server2client.msg_content.msg_type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::server2client::msg_content_msg_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes datas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_content)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_content)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server2client.msg_content.msg_type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes datas = 2;
  if (this->datas().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->datas(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_content)
}

::google::protobuf::uint8* msg_content::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_content)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server2client.msg_content.msg_type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bytes datas = 2;
  if (this->datas().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->datas(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_content)
  return target;
}

size_t msg_content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_content)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes datas = 2;
  if (this->datas().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->datas());
  }

  // .server2client.msg_content.msg_type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_content::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_content)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_content* source =
      ::google::protobuf::DynamicCastToGenerated<msg_content>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_content)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_content)
    MergeFrom(*source);
  }
}

void msg_content::MergeFrom(const msg_content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_content)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datas().size() > 0) {

    datas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datas_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void msg_content::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_content::CopyFrom(const msg_content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_content::IsInitialized() const {
  return true;
}

void msg_content::Swap(msg_content* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_content::InternalSwap(msg_content* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datas_.Swap(&other->datas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata msg_content::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

void msg_connect::InitAsDefaultInstance() {
}
class msg_connect::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_connect::kArrIntsFieldNumber;
const int msg_connect::kArrStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_connect::msg_connect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_connect)
}
msg_connect::msg_connect(const msg_connect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arr_ints_(from.arr_ints_),
      arr_strings_(from.arr_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_connect)
}

void msg_connect::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_connect_server2client_2eproto.base);
}

msg_connect::~msg_connect() {
  // @@protoc_insertion_point(destructor:server2client.msg_connect)
  SharedDtor();
}

void msg_connect::SharedDtor() {
}

void msg_connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_connect& msg_connect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_connect_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_connect::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_ints_.Clear();
  arr_strings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_connect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_connect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_arr_ints();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_arr_ints(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("server2client.msg_connect.arr_strings");
          object = msg->add_arr_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_connect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_ints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_arr_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arr_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arr_strings(this->arr_strings_size() - 1).data(),
            static_cast<int>(this->arr_strings(this->arr_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server2client.msg_connect.arr_strings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_connect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_ints_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_ints(i), output);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_connect.arr_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arr_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_connect)
}

::google::protobuf::uint8* msg_connect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_connect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_ints_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_ints_, target);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_connect.arr_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arr_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_connect)
  return target;
}

size_t msg_connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_connect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->arr_ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _arr_ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string arr_strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arr_strings_size());
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arr_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_connect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_connect)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_connect* source =
      ::google::protobuf::DynamicCastToGenerated<msg_connect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_connect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_connect)
    MergeFrom(*source);
  }
}

void msg_connect::MergeFrom(const msg_connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_ints_.MergeFrom(from.arr_ints_);
  arr_strings_.MergeFrom(from.arr_strings_);
}

void msg_connect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_connect::CopyFrom(const msg_connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_connect::IsInitialized() const {
  return true;
}

void msg_connect::Swap(msg_connect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_connect::InternalSwap(msg_connect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_ints_.InternalSwap(&other->arr_ints_);
  arr_strings_.InternalSwap(CastToBase(&other->arr_strings_));
}

::google::protobuf::Metadata msg_connect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

void msg_connect_ack::InitAsDefaultInstance() {
}
class msg_connect_ack::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_connect_ack::kArrIntsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_connect_ack::msg_connect_ack()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_connect_ack)
}
msg_connect_ack::msg_connect_ack(const msg_connect_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arr_ints_(from.arr_ints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_connect_ack)
}

void msg_connect_ack::SharedCtor() {
}

msg_connect_ack::~msg_connect_ack() {
  // @@protoc_insertion_point(destructor:server2client.msg_connect_ack)
  SharedDtor();
}

void msg_connect_ack::SharedDtor() {
}

void msg_connect_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_connect_ack& msg_connect_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_connect_ack_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_connect_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_connect_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_ints_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_connect_ack::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_connect_ack*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_arr_ints();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_arr_ints(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_connect_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_connect_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_ints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_arr_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_connect_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_connect_ack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_connect_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_connect_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_ints_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_ints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_connect_ack)
}

::google::protobuf::uint8* msg_connect_ack::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_connect_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_ints_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_ints_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_connect_ack)
  return target;
}

size_t msg_connect_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_connect_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->arr_ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _arr_ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_connect_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_connect_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_connect_ack* source =
      ::google::protobuf::DynamicCastToGenerated<msg_connect_ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_connect_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_connect_ack)
    MergeFrom(*source);
  }
}

void msg_connect_ack::MergeFrom(const msg_connect_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_connect_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_ints_.MergeFrom(from.arr_ints_);
}

void msg_connect_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_connect_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_connect_ack::CopyFrom(const msg_connect_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_connect_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_connect_ack::IsInitialized() const {
  return true;
}

void msg_connect_ack::Swap(msg_connect_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_connect_ack::InternalSwap(msg_connect_ack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_ints_.InternalSwap(&other->arr_ints_);
}

::google::protobuf::Metadata msg_connect_ack::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

void msg_login::InitAsDefaultInstance() {
}
class msg_login::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_login::kArrIntsFieldNumber;
const int msg_login::kArrStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_login::msg_login()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_login)
}
msg_login::msg_login(const msg_login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arr_ints_(from.arr_ints_),
      arr_strings_(from.arr_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_login)
}

void msg_login::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_login_server2client_2eproto.base);
}

msg_login::~msg_login() {
  // @@protoc_insertion_point(destructor:server2client.msg_login)
  SharedDtor();
}

void msg_login::SharedDtor() {
}

void msg_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_login& msg_login::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_login_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_login::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_ints_.Clear();
  arr_strings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_login::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_login*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_arr_ints();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_arr_ints(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("server2client.msg_login.arr_strings");
          object = msg->add_arr_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_login)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_ints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_arr_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arr_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arr_strings(this->arr_strings_size() - 1).data(),
            static_cast<int>(this->arr_strings(this->arr_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server2client.msg_login.arr_strings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_login)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_ints_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_ints(i), output);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_login.arr_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arr_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_login)
}

::google::protobuf::uint8* msg_login::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_login)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_ints_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_ints_, target);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_login.arr_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arr_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_login)
  return target;
}

size_t msg_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_login)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->arr_ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _arr_ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string arr_strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arr_strings_size());
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arr_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_login)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_login* source =
      ::google::protobuf::DynamicCastToGenerated<msg_login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_login)
    MergeFrom(*source);
  }
}

void msg_login::MergeFrom(const msg_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_ints_.MergeFrom(from.arr_ints_);
  arr_strings_.MergeFrom(from.arr_strings_);
}

void msg_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login::CopyFrom(const msg_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login::IsInitialized() const {
  return true;
}

void msg_login::Swap(msg_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_login::InternalSwap(msg_login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_ints_.InternalSwap(&other->arr_ints_);
  arr_strings_.InternalSwap(CastToBase(&other->arr_strings_));
}

::google::protobuf::Metadata msg_login::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

void msg_login_ack::InitAsDefaultInstance() {
}
class msg_login_ack::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_login_ack::kArrIntsFieldNumber;
const int msg_login_ack::kArrStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_login_ack::msg_login_ack()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_login_ack)
}
msg_login_ack::msg_login_ack(const msg_login_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arr_ints_(from.arr_ints_),
      arr_strings_(from.arr_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_login_ack)
}

void msg_login_ack::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_login_ack_server2client_2eproto.base);
}

msg_login_ack::~msg_login_ack() {
  // @@protoc_insertion_point(destructor:server2client.msg_login_ack)
  SharedDtor();
}

void msg_login_ack::SharedDtor() {
}

void msg_login_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_login_ack& msg_login_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_login_ack_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_login_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_login_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_ints_.Clear();
  arr_strings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_login_ack::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_login_ack*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_arr_ints();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_arr_ints(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("server2client.msg_login_ack.arr_strings");
          object = msg->add_arr_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_login_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_login_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_ints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_arr_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arr_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arr_strings(this->arr_strings_size() - 1).data(),
            static_cast<int>(this->arr_strings(this->arr_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server2client.msg_login_ack.arr_strings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_login_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_login_ack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_login_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_login_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_ints_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_ints(i), output);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_login_ack.arr_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arr_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_login_ack)
}

::google::protobuf::uint8* msg_login_ack::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_login_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_ints_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_ints_, target);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_login_ack.arr_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arr_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_login_ack)
  return target;
}

size_t msg_login_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_login_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->arr_ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _arr_ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string arr_strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arr_strings_size());
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arr_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_login_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_login_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_login_ack* source =
      ::google::protobuf::DynamicCastToGenerated<msg_login_ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_login_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_login_ack)
    MergeFrom(*source);
  }
}

void msg_login_ack::MergeFrom(const msg_login_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_login_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_ints_.MergeFrom(from.arr_ints_);
  arr_strings_.MergeFrom(from.arr_strings_);
}

void msg_login_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_login_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_login_ack::CopyFrom(const msg_login_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_login_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_login_ack::IsInitialized() const {
  return true;
}

void msg_login_ack::Swap(msg_login_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_login_ack::InternalSwap(msg_login_ack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_ints_.InternalSwap(&other->arr_ints_);
  arr_strings_.InternalSwap(CastToBase(&other->arr_strings_));
}

::google::protobuf::Metadata msg_login_ack::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

void msg_establish_brokerchannel::InitAsDefaultInstance() {
}
class msg_establish_brokerchannel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_establish_brokerchannel::kArrIntsFieldNumber;
const int msg_establish_brokerchannel::kArrStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_establish_brokerchannel::msg_establish_brokerchannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_establish_brokerchannel)
}
msg_establish_brokerchannel::msg_establish_brokerchannel(const msg_establish_brokerchannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arr_ints_(from.arr_ints_),
      arr_strings_(from.arr_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_establish_brokerchannel)
}

void msg_establish_brokerchannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_establish_brokerchannel_server2client_2eproto.base);
}

msg_establish_brokerchannel::~msg_establish_brokerchannel() {
  // @@protoc_insertion_point(destructor:server2client.msg_establish_brokerchannel)
  SharedDtor();
}

void msg_establish_brokerchannel::SharedDtor() {
}

void msg_establish_brokerchannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_establish_brokerchannel& msg_establish_brokerchannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_establish_brokerchannel_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_establish_brokerchannel::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_establish_brokerchannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_ints_.Clear();
  arr_strings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_establish_brokerchannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_establish_brokerchannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_arr_ints();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_arr_ints(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("server2client.msg_establish_brokerchannel.arr_strings");
          object = msg->add_arr_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_establish_brokerchannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_establish_brokerchannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_ints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_arr_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arr_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arr_strings(this->arr_strings_size() - 1).data(),
            static_cast<int>(this->arr_strings(this->arr_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server2client.msg_establish_brokerchannel.arr_strings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_establish_brokerchannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_establish_brokerchannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_establish_brokerchannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_establish_brokerchannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_ints_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_ints(i), output);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_establish_brokerchannel.arr_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arr_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_establish_brokerchannel)
}

::google::protobuf::uint8* msg_establish_brokerchannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_establish_brokerchannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_ints_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_ints_, target);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_establish_brokerchannel.arr_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arr_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_establish_brokerchannel)
  return target;
}

size_t msg_establish_brokerchannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_establish_brokerchannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->arr_ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _arr_ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string arr_strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arr_strings_size());
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arr_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_establish_brokerchannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_establish_brokerchannel)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_establish_brokerchannel* source =
      ::google::protobuf::DynamicCastToGenerated<msg_establish_brokerchannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_establish_brokerchannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_establish_brokerchannel)
    MergeFrom(*source);
  }
}

void msg_establish_brokerchannel::MergeFrom(const msg_establish_brokerchannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_establish_brokerchannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_ints_.MergeFrom(from.arr_ints_);
  arr_strings_.MergeFrom(from.arr_strings_);
}

void msg_establish_brokerchannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_establish_brokerchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_establish_brokerchannel::CopyFrom(const msg_establish_brokerchannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_establish_brokerchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_establish_brokerchannel::IsInitialized() const {
  return true;
}

void msg_establish_brokerchannel::Swap(msg_establish_brokerchannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_establish_brokerchannel::InternalSwap(msg_establish_brokerchannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_ints_.InternalSwap(&other->arr_ints_);
  arr_strings_.InternalSwap(CastToBase(&other->arr_strings_));
}

::google::protobuf::Metadata msg_establish_brokerchannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

void msg_establish_brokerchannel_ack::InitAsDefaultInstance() {
}
class msg_establish_brokerchannel_ack::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_establish_brokerchannel_ack::kArrIntsFieldNumber;
const int msg_establish_brokerchannel_ack::kArrStringsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_establish_brokerchannel_ack::msg_establish_brokerchannel_ack()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_establish_brokerchannel_ack)
}
msg_establish_brokerchannel_ack::msg_establish_brokerchannel_ack(const msg_establish_brokerchannel_ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      arr_ints_(from.arr_ints_),
      arr_strings_(from.arr_strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_establish_brokerchannel_ack)
}

void msg_establish_brokerchannel_ack::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_establish_brokerchannel_ack_server2client_2eproto.base);
}

msg_establish_brokerchannel_ack::~msg_establish_brokerchannel_ack() {
  // @@protoc_insertion_point(destructor:server2client.msg_establish_brokerchannel_ack)
  SharedDtor();
}

void msg_establish_brokerchannel_ack::SharedDtor() {
}

void msg_establish_brokerchannel_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_establish_brokerchannel_ack& msg_establish_brokerchannel_ack::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_establish_brokerchannel_ack_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_establish_brokerchannel_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_establish_brokerchannel_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arr_ints_.Clear();
  arr_strings_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_establish_brokerchannel_ack::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_establish_brokerchannel_ack*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_arr_ints();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_arr_ints(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("server2client.msg_establish_brokerchannel_ack.arr_strings");
          object = msg->add_arr_strings();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_establish_brokerchannel_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_establish_brokerchannel_ack)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 arr_ints = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_arr_ints())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_arr_ints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string arr_strings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arr_strings()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arr_strings(this->arr_strings_size() - 1).data(),
            static_cast<int>(this->arr_strings(this->arr_strings_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server2client.msg_establish_brokerchannel_ack.arr_strings"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_establish_brokerchannel_ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_establish_brokerchannel_ack)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_establish_brokerchannel_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_establish_brokerchannel_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_arr_ints_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->arr_ints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->arr_ints(i), output);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_establish_brokerchannel_ack.arr_strings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arr_strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_establish_brokerchannel_ack)
}

::google::protobuf::uint8* msg_establish_brokerchannel_ack::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_establish_brokerchannel_ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  if (this->arr_ints_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _arr_ints_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->arr_ints_, target);
  }

  // repeated string arr_strings = 2;
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arr_strings(i).data(), static_cast<int>(this->arr_strings(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "server2client.msg_establish_brokerchannel_ack.arr_strings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arr_strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_establish_brokerchannel_ack)
  return target;
}

size_t msg_establish_brokerchannel_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_establish_brokerchannel_ack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 arr_ints = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->arr_ints_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _arr_ints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string arr_strings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->arr_strings_size());
  for (int i = 0, n = this->arr_strings_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arr_strings(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_establish_brokerchannel_ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_establish_brokerchannel_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_establish_brokerchannel_ack* source =
      ::google::protobuf::DynamicCastToGenerated<msg_establish_brokerchannel_ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_establish_brokerchannel_ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_establish_brokerchannel_ack)
    MergeFrom(*source);
  }
}

void msg_establish_brokerchannel_ack::MergeFrom(const msg_establish_brokerchannel_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_establish_brokerchannel_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arr_ints_.MergeFrom(from.arr_ints_);
  arr_strings_.MergeFrom(from.arr_strings_);
}

void msg_establish_brokerchannel_ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_establish_brokerchannel_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_establish_brokerchannel_ack::CopyFrom(const msg_establish_brokerchannel_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_establish_brokerchannel_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_establish_brokerchannel_ack::IsInitialized() const {
  return true;
}

void msg_establish_brokerchannel_ack::Swap(msg_establish_brokerchannel_ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_establish_brokerchannel_ack::InternalSwap(msg_establish_brokerchannel_ack* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arr_ints_.InternalSwap(&other->arr_ints_);
  arr_strings_.InternalSwap(CastToBase(&other->arr_strings_));
}

::google::protobuf::Metadata msg_establish_brokerchannel_ack::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// ===================================================================

msg_testmap_MapInfoEntry_DoNotUse::msg_testmap_MapInfoEntry_DoNotUse() {}
msg_testmap_MapInfoEntry_DoNotUse::msg_testmap_MapInfoEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void msg_testmap_MapInfoEntry_DoNotUse::MergeFrom(const msg_testmap_MapInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata msg_testmap_MapInfoEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[7];
}
void msg_testmap_MapInfoEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_testmap_MapInfoEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      msg_testmap_MapInfoEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "server2client.msg_testmap.MapInfoEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void msg_testmap::InitAsDefaultInstance() {
}
class msg_testmap::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int msg_testmap::kMapInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

msg_testmap::msg_testmap()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server2client.msg_testmap)
}
msg_testmap::msg_testmap(const msg_testmap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_info_.MergeFrom(from.map_info_);
  // @@protoc_insertion_point(copy_constructor:server2client.msg_testmap)
}

void msg_testmap::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_msg_testmap_server2client_2eproto.base);
}

msg_testmap::~msg_testmap() {
  // @@protoc_insertion_point(destructor:server2client.msg_testmap)
  SharedDtor();
}

void msg_testmap::SharedDtor() {
}

void msg_testmap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const msg_testmap& msg_testmap::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_msg_testmap_server2client_2eproto.base);
  return *internal_default_instance();
}


void msg_testmap::Clear() {
// @@protoc_insertion_point(message_clear_start:server2client.msg_testmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* msg_testmap::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<msg_testmap*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<int32, string> map_info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::server2client::msg_testmap_MapInfoEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->map_info_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool msg_testmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:server2client.msg_testmap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, string> map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          msg_testmap_MapInfoEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              msg_testmap_MapInfoEntry_DoNotUse,
              ::google::protobuf::int32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::std::string > > parser(&map_info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "server2client.msg_testmap.MapInfoEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:server2client.msg_testmap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:server2client.msg_testmap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void msg_testmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:server2client.msg_testmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map_info = 1;
  if (!this->map_info().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "server2client.msg_testmap.MapInfoEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_info().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_info().begin();
          it != this->map_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<msg_testmap_MapInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_info_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      ::std::unique_ptr<msg_testmap_MapInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_info().begin();
          it != this->map_info().end(); ++it) {
        entry.reset(map_info_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:server2client.msg_testmap)
}

::google::protobuf::uint8* msg_testmap::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:server2client.msg_testmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, string> map_info = 1;
  if (!this->map_info().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "server2client.msg_testmap.MapInfoEntry.value");
      }
    };

    if (false &&
        this->map_info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->map_info().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_info().begin();
          it != this->map_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<msg_testmap_MapInfoEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_info_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      ::std::unique_ptr<msg_testmap_MapInfoEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
          it = this->map_info().begin();
          it != this->map_info().end(); ++it) {
        entry.reset(map_info_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server2client.msg_testmap)
  return target;
}

size_t msg_testmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server2client.msg_testmap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> map_info = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_info_size());
  {
    ::std::unique_ptr<msg_testmap_MapInfoEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::std::string >::const_iterator
        it = this->map_info().begin();
        it != this->map_info().end(); ++it) {
      entry.reset(map_info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void msg_testmap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server2client.msg_testmap)
  GOOGLE_DCHECK_NE(&from, this);
  const msg_testmap* source =
      ::google::protobuf::DynamicCastToGenerated<msg_testmap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server2client.msg_testmap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server2client.msg_testmap)
    MergeFrom(*source);
  }
}

void msg_testmap::MergeFrom(const msg_testmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server2client.msg_testmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_info_.MergeFrom(from.map_info_);
}

void msg_testmap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server2client.msg_testmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_testmap::CopyFrom(const msg_testmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server2client.msg_testmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_testmap::IsInitialized() const {
  return true;
}

void msg_testmap::Swap(msg_testmap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void msg_testmap::InternalSwap(msg_testmap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  map_info_.Swap(&other->map_info_);
}

::google::protobuf::Metadata msg_testmap::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_server2client_2eproto);
  return ::file_level_metadata_server2client_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server2client
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::server2client::msg_content* Arena::CreateMaybeMessage< ::server2client::msg_content >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_content >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_connect* Arena::CreateMaybeMessage< ::server2client::msg_connect >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_connect >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_connect_ack* Arena::CreateMaybeMessage< ::server2client::msg_connect_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_connect_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_login* Arena::CreateMaybeMessage< ::server2client::msg_login >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_login >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_login_ack* Arena::CreateMaybeMessage< ::server2client::msg_login_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_login_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_establish_brokerchannel* Arena::CreateMaybeMessage< ::server2client::msg_establish_brokerchannel >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_establish_brokerchannel >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_establish_brokerchannel_ack* Arena::CreateMaybeMessage< ::server2client::msg_establish_brokerchannel_ack >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_establish_brokerchannel_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_testmap_MapInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::server2client::msg_testmap_MapInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_testmap_MapInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::server2client::msg_testmap* Arena::CreateMaybeMessage< ::server2client::msg_testmap >(Arena* arena) {
  return Arena::CreateInternal< ::server2client::msg_testmap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
